const EnderecoModel = require('../models/enderecoModel');
const { v4: uuidv4 } = require('uuid');

// üîç Listar todos os endere√ßos
const listarEndereco = async (req, res) => {
    try {
        const enderecos = await EnderecoModel.listarEnderecos();
        res.status(200).json(enderecos);
    } catch (err) {
        console.error('Erro ao listar endere√ßos:', err.message);
        res.status(500).json({ erro: 'Erro interno no servidor' });
    }
};

// ‚ûï Criar novo endere√ßo
const criarEndereco = async (req, res) => {
    const { id_usuario, rua, numero, complemento, bairro, cidade, estado, cep } = req.body;

    if (!id_usuario || !rua || !numero || !bairro || !cidade || !estado || !cep) {
        return res.status(400).json({ erro: 'Campos obrigat√≥rios n√£o preenchidos.' });
    }

    try {
        const id_endereco = uuidv4();
        await EnderecoModel.criarEndereco({
            id_endereco,
            id_usuario,
            rua,
            numero,
            complemento,
            bairro,
            cidade,
            estado,
            cep
        });

        res.status(201).json({ mensagem: 'Endere√ßo cadastrado com sucesso.' });
    } catch (err) {
        console.error('Erro ao cadastrar endere√ßo:', err.message);
        res.status(500).json({ erro: 'Erro interno no servidor' });
    }
};

// ‚úèÔ∏è Atualizar endere√ßo
const atualizarEndereco = async (req, res) => {
    const { id } = req.params;
    const { rua, numero, complemento, bairro, cidade, estado, cep } = req.body;

    try {
        const result = await EnderecoModel.atualizarEndereco(id, {
            rua,
            numero,
            complemento,
            bairro,
            cidade,
            estado,
            cep
        });

        if (!result) {
            return res.status(404).json({ erro: 'Endere√ßo n√£o encontrado.' });
        }

        res.status(200).json(result);
    } catch (err) {
        console.error('Erro ao atualizar endere√ßo:', err.message);
        res.status(500).json({ erro: 'Erro interno no servidor' });
    }
};

// üóëÔ∏è Deletar endere√ßo
const deletarEndereco = async (req, res) => {
    const { id } = req.params;

    try {
        const result = await EnderecoModel.deletarEndereco(id);

        if (!result) {
            return res.status(404).json({ erro: 'Endere√ßo n√£o encontrado.' });
        }

        res.status(200).json({ mensagem: 'Endere√ßo exclu√≠do com sucesso.' });
    } catch (err) {
        console.error('Erro ao excluir endere√ßo:', err.message);
        res.status(500).json({ erro: 'Erro interno no servidor' });
    }
};

const listarEnderecoPorUsuario = async (req, res) => {
  const { id_usuario } = req.params;

  try {
    const enderecos = await EnderecoModel.listarEnderecosPorUsuario(id_usuario);

    res.status(200).json(enderecos);
  } catch (err) {
    console.error('Erro ao buscar endere√ßos do usu√°rio:', err.message);
    res.status(500).json({ erro: 'Erro interno no servidor' });
  }
};

// üîç Buscar endere√ßo por ID
const buscarEnderecoPorId = async (req, res) => {
  const { id } = req.params;

  try {
    const endereco = await EnderecoModel.buscarEnderecoPorId(id);

    if (!endereco) {
      return res.status(404).json({ erro: 'Endere√ßo n√£o encontrado.' });
    }

    res.status(200).json(endereco);
  } catch (err) {
    console.error('Erro ao buscar endere√ßo por ID:', err.message);
    res.status(500).json({ erro: 'Erro interno no servidor' });
  }
};

module.exports = {
    listarEndereco,
    criarEndereco,
    atualizarEndereco,
    deletarEndereco,
    listarEnderecoPorUsuario,
    buscarEnderecoPorId
};
